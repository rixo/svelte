import { S as SvelteComponentDev, i as init, d as dispatch_dev, E as globals, s as safe_not_equal, W as add_render_callback, v as validate_store, r as component_subscribe, o as onMount, e as element, l as space, m as empty, c as claim_element, a as children, b as detach_dev, p as claim_space, f as attr_dev, Q as toggle_class, h as add_location, j as insert_dev, w as mount_component, x as transition_in, y as transition_out, B as check_outros, z as destroy_component, V as binding_callbacks, a4 as bind, T as listen_dev, k as append_dev, A as group_outros, a5 as add_flush_callback } from './index.d7f76d54.js';
import './index.5e2a01ed.js';
import { a as stores$1 } from './app.ea4a3f30.js';
import './index.e235fd0f.js';
import { R as Repl } from './Repl.cb8dce28.js';
import { I as InputOutputToggle } from './InputOutputToggle.de7658d6.js';

const table = [];
for (let n = 0; n < 256; n++) {
	let c = n;
	for (let k = 0; k < 8; k++) {
		c = c & 1 ? 0xEDB88320 ^ (c >>> 1) : c >>> 1;
	}
	table[n] = c;
}
//# sourceMappingURL=index.es.js.map

const isMac = typeof navigator !== 'undefined' && navigator.platform === 'MacIntel';

/* src/routes/repl/[id]/index.svelte generated by Svelte v3.12.0 */
const { console: console_1, window: window_1 } = globals;

const file = "src/routes/repl/[id]/index.svelte";

// (226:1) {#if true}
function create_if_block(ctx) {
	var div, t, if_block_anchor, current;

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl: ctx.svelteUrl,
		rollupUrl: ctx.rollupUrl,
		relaxed: ctx.relaxed,
		fixed: ctx.mobile,
		injectedJS: ctx.mapbox_setup
	};
	var repl_1 = new Repl({ props: repl_1_props, $$inline: true });

	ctx.repl_1_binding(repl_1);

	var if_block = (ctx.mobile) && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			repl_1.$$.fragment.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			repl_1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "viewport svelte-kdhpws");
			toggle_class(div, "offset", ctx.checked);
			add_location(div, file, 226, 2, 5112);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(repl_1, div, null);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var repl_1_changes = {};
			if (changed.svelteUrl) repl_1_changes.svelteUrl = ctx.svelteUrl;
			if (changed.relaxed) repl_1_changes.relaxed = ctx.relaxed;
			if (changed.mobile) repl_1_changes.fixed = ctx.mobile;
			repl_1.$set(repl_1_changes);

			if (changed.checked) {
				toggle_class(div, "offset", ctx.checked);
			}

			if (ctx.mobile) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(repl_1.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			ctx.repl_1_binding(null);

			destroy_component(repl_1);

			if (detaching) {
				detach_dev(t);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(226:1) {#if true}", ctx });
	return block;
}

// (239:2) {#if mobile}
function create_if_block_1(ctx) {
	var updating_checked, current;

	function inputoutputtoggle_checked_binding(value) {
		ctx.inputoutputtoggle_checked_binding.call(null, value);
		updating_checked = true;
		add_flush_callback(() => updating_checked = false);
	}

	let inputoutputtoggle_props = {};
	if (ctx.checked !== void 0) {
		inputoutputtoggle_props.checked = ctx.checked;
	}
	var inputoutputtoggle = new InputOutputToggle({
		props: inputoutputtoggle_props,
		$$inline: true
	});

	binding_callbacks.push(() => bind(inputoutputtoggle, 'checked', inputoutputtoggle_checked_binding));

	const block = {
		c: function create() {
			inputoutputtoggle.$$.fragment.c();
		},

		l: function claim(nodes) {
			inputoutputtoggle.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(inputoutputtoggle, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var inputoutputtoggle_changes = {};
			if (!updating_checked && changed.checked) {
				inputoutputtoggle_changes.checked = ctx.checked;
			}
			inputoutputtoggle.$set(inputoutputtoggle_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(inputoutputtoggle.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(inputoutputtoggle.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(inputoutputtoggle, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1.name, type: "if", source: "(239:2) {#if mobile}", ctx });
	return block;
}

function create_fragment(ctx) {
	var title_value, meta0, meta1, meta2, t, div, current, dispose;

	add_render_callback(ctx.onwindowresize);

	document.title = title_value = "" + ctx.name + " • REPL • Svelte";

	var if_block =  create_if_block(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t = space();
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte REPL");
			add_location(meta0, file, 209, 1, 4678);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file, 210, 1, 4729);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive Svelte playground");
			add_location(meta2, file, 211, 1, 4807);
			attr_dev(div, "class", "repl-outer " + (zen_mode ? 'zen-mode' : '') + " svelte-kdhpws");
			toggle_class(div, "mobile", ctx.mobile);
			add_location(div, file, 216, 0, 4931);
			dispose = listen_dev(window_1, "resize", ctx.onwindowresize);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.name) && title_value !== (title_value = "" + ctx.name + " • REPL • Svelte")) {
				document.title = title_value;
			}

			if_block.p(changed, ctx);

			if (changed.mobile) {
				toggle_class(div, "mobile", ctx.mobile);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			if (if_block) if_block.d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function preload({ params, query }) {
	return {
		version: query.version || '3',
		id: params.id
	};
}

let zen_mode = true;

function instance($$self, $$props, $$invalidate) {
	let $session;

	

	let { version, id } = $$props;

	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	let repl;
	let gist;
	let name = 'Loading...';
	let is_relaxed_gist = false;
	let width =  window.innerWidth ;
	let checked = false;

	function update_query_string(version) {
		const params = [];

		if (version !== 'latest') params.push(`version=${version}`);

		const url = params.length > 0
			? `repl/${id}?${params.join('&')}`
			: `repl/${id}`;

		history.replaceState({}, 'x', url);
	}

	function fetch_gist(id) {
		if (gist && gist.uid === id) {
			// if the id changed because we just forked, don't refetch
			return;
		}

		// TODO handle `relaxed` logic
		fetch(`repl/${id}.json`).then(r => {
			if (r.ok) {
				r.json().then(data => {
					$$invalidate('gist', gist = data);
					$$invalidate('name', name = data.name);

					$$invalidate('is_relaxed_gist', is_relaxed_gist = data.relaxed);

					const components = data.files.map(file => {
						let [name, type] = file.name.split('.');
						if (type === 'html') type = 'svelte'; // TODO do this on the server
						return { name, type, source: file.source };
					});

					components.sort((a, b) => {
						if (a.name === 'Game' && a.type === 'svelte') return -1;
						if (b.name === 'Game' && b.type === 'svelte') return 1;
						if (a.name === 'App' && a.type === 'svelte') return -1;
						if (b.name === 'App' && b.type === 'svelte') return 1;

						if (a.type !== b.type) return a.type === 'svelte' ? -1 : 1;

						return a.name < b.name ? -1 : 1;
					});

					repl.set({ components });
				});
			} else {
				console.warn('TODO: 404 Gist');
			}
		});
	}

	onMount(() => {
		if (version !== 'local') {
			fetch(`https://unpkg.com/svelte@${version || '3'}/package.json`)
				.then(r => r.json())
				.then(pkg => {
					$$invalidate('version', version = pkg.version);
				});
		}
	});

	const rollupUrl = `https://unpkg.com/rollup@1/dist/rollup.browser.js`;

	// needed for context API example
	const mapbox_setup = `window.MAPBOX_ACCESS_TOKEN = undefined;`;

	const writable_props = ['version', 'id'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1.warn(`<Index> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		width = window_1.innerWidth; $$invalidate('width', width);
	}

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('repl', repl = $$value);
		});
	}

	function inputoutputtoggle_checked_binding(value) {
		checked = value;
		$$invalidate('checked', checked);
	}

	$$self.$set = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { version, id, repl, gist, name, zen_mode, is_relaxed_gist, width, checked, svelteUrl, mobile, relaxed, $session };
	};

	$$self.$inject_state = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('zen_mode' in $$props) $$invalidate('zen_mode', zen_mode = $$props.zen_mode);
		if ('is_relaxed_gist' in $$props) $$invalidate('is_relaxed_gist', is_relaxed_gist = $$props.is_relaxed_gist);
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
		if ('checked' in $$props) $$invalidate('checked', checked = $$props.checked);
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('mobile' in $$props) $$invalidate('mobile', mobile = $$props.mobile);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('$session' in $$props) session.set($session);
	};

	let svelteUrl, mobile, relaxed;

	$$self.$$.update = ($$dirty = { version: 1, id: 1, width: 1, is_relaxed_gist: 1, $session: 1, gist: 1 }) => {
		if ($$dirty.version) { if (typeof history !== 'undefined') update_query_string(version); }
		if ($$dirty.id) { fetch_gist(id); }
		if ($$dirty.version) { $$invalidate('svelteUrl', svelteUrl =  version === 'local' ?
				`${location.origin}/repl/local` :
				`https://unpkg.com/svelte@${version}`); }
		if ($$dirty.width) { $$invalidate('mobile', mobile = width < 540); }
		if ($$dirty.is_relaxed_gist || $$dirty.$session || $$dirty.gist) { $$invalidate('relaxed', relaxed = is_relaxed_gist || ($session.user && gist && $session.user.uid === gist.owner)); }
	};

	return {
		version,
		id,
		session,
		repl,
		name,
		width,
		checked,
		rollupUrl,
		mapbox_setup,
		svelteUrl,
		mobile,
		relaxed,
		onwindowresize,
		repl_1_binding,
		inputoutputtoggle_checked_binding
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["version", "id"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.version === undefined && !('version' in props)) {
			console_1.warn("<Index> was created without expected prop 'version'");
		}
		if (ctx.id === undefined && !('id' in props)) {
			console_1.warn("<Index> was created without expected prop 'id'");
		}
	}

	get version() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
