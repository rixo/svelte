import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, M as svg_element, c as claim_element, a as children, b as detach_dev, N as xlink_attr, h as add_location, f as attr_dev, j as insert_dev, k as append_dev, n as noop, O as afterUpdate, e as element, l as space, p as claim_space, P as HtmlTag, Q as toggle_class, x as transition_in, A as group_outros, y as transition_out, B as check_outros, R as destroy_each, T as listen_dev, U as run_all, V as binding_callbacks, w as mount_component, z as destroy_component, o as onMount, g as set_style } from './index.d7f76d54.js';
import './index.5e2a01ed.js';

/* node_modules/@sveltejs/site-kit/components/Icon.svelte generated by Svelte v3.12.0 */

const file = "node_modules/@sveltejs/site-kit/components/Icon.svelte";

function create_fragment(ctx) {
	var svg, use, use_xlink_href_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			this.h();
		},

		l: function claim(nodes) {
			svg = claim_element(nodes, "svg", { class: true, width: true, height: true }, true);
			var svg_nodes = children(svg);

			use = claim_element(svg_nodes, "use", { "xlink:href": true }, true);
			var use_nodes = children(use);

			use_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			xlink_attr(use, "xlink:href", use_xlink_href_value = "#" + ctx.name);
			add_location(use, file, 14, 1, 308);
			attr_dev(svg, "class", "icon svelte-5yec89");
			attr_dev(svg, "width", ctx.size);
			attr_dev(svg, "height", ctx.size);
			add_location(svg, file, 13, 0, 261);
		},

		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},

		p: function update(changed, ctx) {
			if ((changed.name) && use_xlink_href_value !== (use_xlink_href_value = "#" + ctx.name)) {
				xlink_attr(use, "xlink:href", use_xlink_href_value);
			}

			if (changed.size) {
				attr_dev(svg, "width", ctx.size);
				attr_dev(svg, "height", ctx.size);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { name, size = 20 } = $$props;

	const writable_props = ['name', 'size'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Icon> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('size' in $$props) $$invalidate('size', size = $$props.size);
	};

	$$self.$capture_state = () => {
		return { name, size };
	};

	$$self.$inject_state = $$props => {
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('size' in $$props) $$invalidate('size', size = $$props.size);
	};

	return { name, size };
}

class Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["name", "size"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Icon", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.name === undefined && !('name' in props)) {
			console.warn("<Icon> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@sveltejs/site-kit/components/GuideContents.svelte generated by Svelte v3.12.0 */

const file$1 = "node_modules/@sveltejs/site-kit/components/GuideContents.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.subsection = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.section = list[i];
	return child_ctx;
}

// (114:4) {#if section.slug === active_section}
function create_if_block_1(ctx) {
	var div, current;

	var icon = new Icon({
		props: { name: "arrow-right" },
		$$inline: true
	});

	const block = {
		c: function create() {
			div = element("div");
			icon.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			icon.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "icon-container svelte-mm3tjv");
			add_location(div, file$1, 114, 5, 2128);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(icon);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1.name, type: "if", source: "(114:4) {#if section.slug === active_section}", ctx });
	return block;
}

// (131:5) {#if subsection.slug === active_section}
function create_if_block(ctx) {
	var div, current;

	var icon = new Icon({
		props: { name: "arrow-right" },
		$$inline: true
	});

	const block = {
		c: function create() {
			div = element("div");
			icon.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			icon.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "icon-container svelte-mm3tjv");
			add_location(div, file$1, 131, 6, 2593);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(icon);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(131:5) {#if subsection.slug === active_section}", ctx });
	return block;
}

// (121:3) {#each section.subsections as subsection}
function create_each_block_1(ctx) {
	var a, html_tag, raw_value = ctx.subsection.title + "", t, a_href_value, a_data_level_value, current;

	var if_block = (ctx.subsection.slug === ctx.active_section) && create_if_block(ctx);

	const block = {
		c: function create() {
			a = element("a");
			t = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true, "data-level": true }, false);
			var a_nodes = children(a);

			t = claim_space(a_nodes);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, t);
			attr_dev(a, "class", "subsection svelte-mm3tjv");
			attr_dev(a, "href", a_href_value = "docs#" + ctx.subsection.slug);
			attr_dev(a, "data-level", a_data_level_value = ctx.subsection.level);
			toggle_class(a, "active", ctx.subsection.slug === ctx.active_section);
			add_location(a, file$1, 122, 4, 2348);
		},

		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			html_tag.m(a);
			append_dev(a, t);
			if (if_block) if_block.m(a, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.sections) && raw_value !== (raw_value = ctx.subsection.title + "")) {
				html_tag.p(raw_value);
			}

			if (ctx.subsection.slug === ctx.active_section) {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				} else transition_in(if_block, 1);
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}

			if ((!current || changed.sections) && a_href_value !== (a_href_value = "docs#" + ctx.subsection.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((!current || changed.sections) && a_data_level_value !== (a_data_level_value = ctx.subsection.level)) {
				attr_dev(a, "data-level", a_data_level_value);
			}

			if ((changed.sections || changed.active_section)) {
				toggle_class(a, "active", ctx.subsection.slug === ctx.active_section);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1.name, type: "each", source: "(121:3) {#each section.subsections as subsection}", ctx });
	return block;
}

// (109:1) {#each sections as section}
function create_each_block(ctx) {
	var li, a, html_tag, raw_value = ctx.section.metadata.title + "", t0, a_href_value, t1, t2, current;

	var if_block = (ctx.section.slug === ctx.active_section) && create_if_block_1(ctx);

	let each_value_1 = ctx.section.subsections;

	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", { class: true, href: true }, false);
			var a_nodes = children(a);

			t0 = claim_space(a_nodes);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			html_tag = new HtmlTag(raw_value, t0);
			attr_dev(a, "class", "section svelte-mm3tjv");
			attr_dev(a, "href", a_href_value = "docs#" + ctx.section.slug);
			toggle_class(a, "active", ctx.section.slug === ctx.active_section);
			add_location(a, file$1, 110, 3, 1949);
			attr_dev(li, "class", "svelte-mm3tjv");
			add_location(li, file$1, 109, 2, 1941);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			html_tag.m(a);
			append_dev(a, t0);
			if (if_block) if_block.m(a, null);
			append_dev(li, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}

			append_dev(li, t2);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.sections) && raw_value !== (raw_value = ctx.section.metadata.title + "")) {
				html_tag.p(raw_value);
			}

			if (ctx.section.slug === ctx.active_section) {
				if (!if_block) {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				} else transition_in(if_block, 1);
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}

			if ((!current || changed.sections) && a_href_value !== (a_href_value = "docs#" + ctx.section.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.sections || changed.active_section)) {
				toggle_class(a, "active", ctx.section.slug === ctx.active_section);
			}

			if (changed.sections || changed.active_section) {
				each_value_1 = ctx.section.subsections;

				let i;
				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(li, t2);
					}
				}

				group_outros();
				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			if (if_block) if_block.d();

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(109:1) {#each sections as section}", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var ul_1, current, dispose;

	let each_value = ctx.sections;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul_1 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			ul_1 = claim_element(nodes, "UL", { class: true }, false);
			var ul_1_nodes = children(ul_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_1_nodes);
			}

			ul_1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul_1, "class", "reference-toc svelte-mm3tjv");
			add_location(ul_1, file$1, 102, 0, 1754);

			dispose = [
				listen_dev(ul_1, "mouseenter", ctx.mouseenter_handler),
				listen_dev(ul_1, "mouseleave", ctx.mouseleave_handler)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul_1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul_1, null);
			}

			ctx.ul_1_binding(ul_1);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.sections || changed.active_section) {
				each_value = ctx.sections;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul_1, null);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul_1);
			}

			destroy_each(each_blocks, detaching);

			ctx.ul_1_binding(null);
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	

	let { sections = [], active_section = null, show_contents, prevent_sidebar_scroll = false } = $$props;

	let ul;

	afterUpdate(() => {
		// bit of a hack — prevent sidebar scrolling if
		// TOC is open on mobile, or scroll came from within sidebar
		if (prevent_sidebar_scroll || show_contents && window.innerWidth < 832) return;

		const active = ul.querySelector('.active');

		if (active) {
			const { top, bottom } = active.getBoundingClientRect();

			const min = 200;
			const max = window.innerHeight - 200;

			if (top > max) {
				ul.parentNode.scrollBy({
					top: top - max,
					left: 0,
					behavior: 'smooth'
				});
			} else if (bottom < min) {
				ul.parentNode.scrollBy({
					top: bottom - min,
					left: 0,
					behavior: 'smooth'
				});
			}
		}
	});

	const writable_props = ['sections', 'active_section', 'show_contents', 'prevent_sidebar_scroll'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<GuideContents> was created with unknown prop '${key}'`);
	});

	function ul_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('ul', ul = $$value);
		});
	}

	const mouseenter_handler = () => $$invalidate('prevent_sidebar_scroll', prevent_sidebar_scroll = true);

	const mouseleave_handler = () => $$invalidate('prevent_sidebar_scroll', prevent_sidebar_scroll = false);

	$$self.$set = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('show_contents' in $$props) $$invalidate('show_contents', show_contents = $$props.show_contents);
		if ('prevent_sidebar_scroll' in $$props) $$invalidate('prevent_sidebar_scroll', prevent_sidebar_scroll = $$props.prevent_sidebar_scroll);
	};

	$$self.$capture_state = () => {
		return { sections, active_section, show_contents, prevent_sidebar_scroll, ul };
	};

	$$self.$inject_state = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('show_contents' in $$props) $$invalidate('show_contents', show_contents = $$props.show_contents);
		if ('prevent_sidebar_scroll' in $$props) $$invalidate('prevent_sidebar_scroll', prevent_sidebar_scroll = $$props.prevent_sidebar_scroll);
		if ('ul' in $$props) $$invalidate('ul', ul = $$props.ul);
	};

	return {
		sections,
		active_section,
		show_contents,
		prevent_sidebar_scroll,
		ul,
		ul_1_binding,
		mouseenter_handler,
		mouseleave_handler
	};
}

class GuideContents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["sections", "active_section", "show_contents", "prevent_sidebar_scroll"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "GuideContents", options, id: create_fragment$1.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.show_contents === undefined && !('show_contents' in props)) {
			console.warn("<GuideContents> was created without expected prop 'show_contents'");
		}
	}

	get sections() {
		throw new Error("<GuideContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<GuideContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active_section() {
		throw new Error("<GuideContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active_section(value) {
		throw new Error("<GuideContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_contents() {
		throw new Error("<GuideContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_contents(value) {
		throw new Error("<GuideContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get prevent_sidebar_scroll() {
		throw new Error("<GuideContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prevent_sidebar_scroll(value) {
		throw new Error("<GuideContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const getFragment = () => window.location.hash.slice(1);

/* node_modules/@sveltejs/site-kit/components/Docs.svelte generated by Svelte v3.12.0 */

const file$2 = "node_modules/@sveltejs/site-kit/components/Docs.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.section = list[i];
	return child_ctx;
}

// (377:1) {#each sections as section}
function create_each_block$1(ctx) {
	var section, h2, span, span_id_value, t0, a0, a0_href_value, t1, html_tag, raw0_value = ctx.section.metadata.title + "", t2, small, a1, a1_href_value, t3, html_tag_1, raw1_value = ctx.section.html + "", t4, section_data_id_value, current;

	var icon = new Icon({ props: { name: "edit" }, $$inline: true });

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			span = element("span");
			t0 = space();
			a0 = element("a");
			t1 = space();
			t2 = space();
			small = element("small");
			a1 = element("a");
			icon.$$.fragment.c();
			t3 = space();
			t4 = space();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { "data-id": true, class: true }, false);
			var section_nodes = children(section);

			h2 = claim_element(section_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			span = claim_element(h2_nodes, "SPAN", { class: true, id: true }, false);
			var span_nodes = children(span);

			span_nodes.forEach(detach_dev);
			t0 = claim_space(h2_nodes);

			a0 = claim_element(h2_nodes, "A", { href: true, class: true, "aria-hidden": true }, false);
			var a0_nodes = children(a0);

			a0_nodes.forEach(detach_dev);
			t1 = claim_space(h2_nodes);
			t2 = claim_space(h2_nodes);

			small = claim_element(h2_nodes, "SMALL", { class: true }, false);
			var small_nodes = children(small);

			a1 = claim_element(small_nodes, "A", { href: true, title: true, class: true }, false);
			var a1_nodes = children(a1);

			icon.$$.fragment.l(a1_nodes);
			a1_nodes.forEach(detach_dev);
			small_nodes.forEach(detach_dev);
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			t4 = claim_space(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "offset-anchor");
			attr_dev(span, "id", span_id_value = ctx.section.slug);
			add_location(span, file$2, 379, 4, 7604);
			attr_dev(a0, "href", a0_href_value = "docs#" + ctx.section.slug);
			attr_dev(a0, "class", "anchor");
			attr_dev(a0, "aria-hidden", "");
			add_location(a0, file$2, 382, 4, 7711);
			html_tag = new HtmlTag(raw0_value, t2);
			attr_dev(a1, "href", a1_href_value = "https://github.com/" + ctx.owner + "/" + ctx.project + "/edit/master" + ctx.path + "/" + ctx.dir + "/" + ctx.section.file);
			attr_dev(a1, "title", ctx.edit_title);
			attr_dev(a1, "class", "svelte-a3bmb2");
			add_location(a1, file$2, 386, 5, 7826);
			attr_dev(small, "class", "svelte-a3bmb2");
			add_location(small, file$2, 385, 4, 7813);
			attr_dev(h2, "class", "svelte-a3bmb2");
			add_location(h2, file$2, 378, 3, 7595);
			html_tag_1 = new HtmlTag(raw1_value, t4);
			attr_dev(section, "data-id", section_data_id_value = ctx.section.slug);
			attr_dev(section, "class", "svelte-a3bmb2");
			add_location(section, file$2, 377, 2, 7559);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, span);
			append_dev(h2, t0);
			append_dev(h2, a0);
			append_dev(h2, t1);
			html_tag.m(h2);
			append_dev(h2, t2);
			append_dev(h2, small);
			append_dev(small, a1);
			mount_component(icon, a1, null);
			append_dev(section, t3);
			html_tag_1.m(section);
			append_dev(section, t4);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.sections) && span_id_value !== (span_id_value = ctx.section.slug)) {
				attr_dev(span, "id", span_id_value);
			}

			if ((!current || changed.sections) && a0_href_value !== (a0_href_value = "docs#" + ctx.section.slug)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if ((!current || changed.sections) && raw0_value !== (raw0_value = ctx.section.metadata.title + "")) {
				html_tag.p(raw0_value);
			}

			if ((!current || changed.owner || changed.project || changed.path || changed.dir || changed.sections) && a1_href_value !== (a1_href_value = "https://github.com/" + ctx.owner + "/" + ctx.project + "/edit/master" + ctx.path + "/" + ctx.dir + "/" + ctx.section.file)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || changed.edit_title) {
				attr_dev(a1, "title", ctx.edit_title);
			}

			if ((!current || changed.sections) && raw1_value !== (raw1_value = ctx.section.html + "")) {
				html_tag_1.p(raw1_value);
			}

			if ((!current || changed.sections) && section_data_id_value !== (section_data_id_value = ctx.section.slug)) {
				attr_dev(section, "data-id", section_data_id_value);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			destroy_component(icon);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$1.name, type: "each", source: "(377:1) {#each sections as section}", ctx });
	return block;
}

function create_fragment$2(ctx) {
	var div0, t0, aside_1, div1, t1, button, current, dispose;

	let each_value = ctx.sections;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	var guidecontents = new GuideContents({
		props: {
		sections: ctx.sections,
		active_section: ctx.active_section,
		show_contents: ctx.show_contents
	},
		$$inline: true
	});

	var icon = new Icon({
		props: { name: ctx.show_contents? 'close' : 'menu' },
		$$inline: true
	});

	const block = {
		c: function create() {
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			aside_1 = element("aside");
			div1 = element("div");
			guidecontents.$$.fragment.c();
			t1 = space();
			button = element("button");
			icon.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			aside_1 = claim_element(nodes, "ASIDE", { class: true }, false);
			var aside_1_nodes = children(aside_1);

			div1 = claim_element(aside_1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			guidecontents.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(aside_1_nodes);

			button = claim_element(aside_1_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			icon.$$.fragment.l(button_nodes);
			button_nodes.forEach(detach_dev);
			aside_1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "content listify svelte-a3bmb2");
			add_location(div0, file$2, 375, 0, 7476);
			attr_dev(div1, "class", "sidebar svelte-a3bmb2");
			add_location(div1, file$2, 398, 1, 8128);
			attr_dev(button, "class", "svelte-a3bmb2");
			add_location(button, file$2, 402, 1, 8291);
			attr_dev(aside_1, "class", "sidebar-container svelte-a3bmb2");
			toggle_class(aside_1, "open", ctx.show_contents);
			add_location(aside_1, file$2, 397, 0, 8048);

			dispose = [
				listen_dev(div1, "click", ctx.click_handler),
				listen_dev(button, "click", ctx.click_handler_1)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			ctx.div0_binding(div0);
			insert_dev(target, t0, anchor);
			insert_dev(target, aside_1, anchor);
			append_dev(aside_1, div1);
			mount_component(guidecontents, div1, null);
			append_dev(aside_1, t1);
			append_dev(aside_1, button);
			mount_component(icon, button, null);
			ctx.aside_1_binding(aside_1);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.sections || changed.owner || changed.project || changed.path || changed.dir || changed.edit_title) {
				each_value = ctx.sections;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}

			var guidecontents_changes = {};
			if (changed.sections) guidecontents_changes.sections = ctx.sections;
			if (changed.active_section) guidecontents_changes.active_section = ctx.active_section;
			if (changed.show_contents) guidecontents_changes.show_contents = ctx.show_contents;
			guidecontents.$set(guidecontents_changes);

			var icon_changes = {};
			if (changed.show_contents) icon_changes.name = ctx.show_contents? 'close' : 'menu';
			icon.$set(icon_changes);

			if (changed.show_contents) {
				toggle_class(aside_1, "open", ctx.show_contents);
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(guidecontents.$$.fragment, local);

			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(guidecontents.$$.fragment, local);
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
			}

			destroy_each(each_blocks, detaching);

			ctx.div0_binding(null);

			if (detaching) {
				detach_dev(t0);
				detach_dev(aside_1);
			}

			destroy_component(guidecontents);

			destroy_component(icon);

			ctx.aside_1_binding(null);
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	

	let { owner = 'sveltejs', project = 'svelte', path = '/site/content', dir = 'docs', edit_title = 'edit this section', sections } = $$props;
	let active_section;

	let container;
	let aside;
	let show_contents = false;

	onMount(() => {
		// don't update `active_section` for headings above level 4, see _sections.js
		const anchors = container.querySelectorAll('[id]:not([data-scrollignore])');

		let positions;

		const onresize = () => {
			const { top } = container.getBoundingClientRect();
			positions = [].map.call(anchors, anchor => {
				return anchor.getBoundingClientRect().top - top;
			});
		};

		let last_id = getFragment();

		const onscroll = () => {
			const top = -window.scrollY;

			let i = anchors.length;
			while (i--) {
				if (positions[i] + top < 40) {
					const anchor = anchors[i];
					const { id } = anchor;

					if (id !== last_id) {
						$$invalidate('active_section', active_section = id);
						last_id = id;
					}

					return;
				}
			}
		};

		window.addEventListener('scroll', onscroll, true);
		window.addEventListener('resize', onresize, true);

		// wait for fonts to load...
		const timeouts = [
			setTimeout(onresize, 1000),
			setTimeout(onscroll, 5000)
		];

		onresize();
		onscroll();

		return () => {
			window.removeEventListener('scroll', onscroll, true);
			window.removeEventListener('resize', onresize, true);

			timeouts.forEach(timeout => clearTimeout(timeout));
		};
	});

	const writable_props = ['owner', 'project', 'path', 'dir', 'edit_title', 'sections'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Docs> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('container', container = $$value);
		});
	}

	const click_handler = () => $$invalidate('show_contents', show_contents = false);

	const click_handler_1 = () => $$invalidate('show_contents', show_contents = !show_contents);

	function aside_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('aside', aside = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('owner' in $$props) $$invalidate('owner', owner = $$props.owner);
		if ('project' in $$props) $$invalidate('project', project = $$props.project);
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('dir' in $$props) $$invalidate('dir', dir = $$props.dir);
		if ('edit_title' in $$props) $$invalidate('edit_title', edit_title = $$props.edit_title);
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
	};

	$$self.$capture_state = () => {
		return { owner, project, path, dir, edit_title, sections, active_section, container, aside, show_contents };
	};

	$$self.$inject_state = $$props => {
		if ('owner' in $$props) $$invalidate('owner', owner = $$props.owner);
		if ('project' in $$props) $$invalidate('project', project = $$props.project);
		if ('path' in $$props) $$invalidate('path', path = $$props.path);
		if ('dir' in $$props) $$invalidate('dir', dir = $$props.dir);
		if ('edit_title' in $$props) $$invalidate('edit_title', edit_title = $$props.edit_title);
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('container' in $$props) $$invalidate('container', container = $$props.container);
		if ('aside' in $$props) $$invalidate('aside', aside = $$props.aside);
		if ('show_contents' in $$props) $$invalidate('show_contents', show_contents = $$props.show_contents);
	};

	return {
		owner,
		project,
		path,
		dir,
		edit_title,
		sections,
		active_section,
		container,
		aside,
		show_contents,
		div0_binding,
		click_handler,
		click_handler_1,
		aside_1_binding
	};
}

class Docs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["owner", "project", "path", "dir", "edit_title", "sections"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Docs", options, id: create_fragment$2.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.sections === undefined && !('sections' in props)) {
			console.warn("<Docs> was created without expected prop 'sections'");
		}
	}

	get owner() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set owner(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get project() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set project(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get path() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set path(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dir() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dir(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get edit_title() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set edit_title(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sections() {
		throw new Error("<Docs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<Docs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@sveltejs/site-kit/components/Icons.svelte generated by Svelte v3.12.0 */

const file$3 = "node_modules/@sveltejs/site-kit/components/Icons.svelte";

function create_fragment$3(ctx) {
	var div, svg, symbol0, line0, polyline0, symbol1, line1, polyline1, symbol2, line2, polyline2, symbol3, line3, polyline3, symbol4, polyline4, symbol5, line4, line5, symbol6, path0, polyline5, line6, symbol7, path1, polygon, symbol8, path2, symbol9, line7, circle0, circle1, path3, symbol10, path4, polyline6, line8, symbol11, path5, symbol12, polyline7, polyline8, line9, line10, symbol13, line11, line12, line13, symbol14, path6, symbol15, line14, symbol16, line15, line16, symbol17, path7, polyline9, polyline10, symbol18, path8, path9, path10, symbol19, path11;

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			symbol0 = svg_element("symbol");
			line0 = svg_element("line");
			polyline0 = svg_element("polyline");
			symbol1 = svg_element("symbol");
			line1 = svg_element("line");
			polyline1 = svg_element("polyline");
			symbol2 = svg_element("symbol");
			line2 = svg_element("line");
			polyline2 = svg_element("polyline");
			symbol3 = svg_element("symbol");
			line3 = svg_element("line");
			polyline3 = svg_element("polyline");
			symbol4 = svg_element("symbol");
			polyline4 = svg_element("polyline");
			symbol5 = svg_element("symbol");
			line4 = svg_element("line");
			line5 = svg_element("line");
			symbol6 = svg_element("symbol");
			path0 = svg_element("path");
			polyline5 = svg_element("polyline");
			line6 = svg_element("line");
			symbol7 = svg_element("symbol");
			path1 = svg_element("path");
			polygon = svg_element("polygon");
			symbol8 = svg_element("symbol");
			path2 = svg_element("path");
			symbol9 = svg_element("symbol");
			line7 = svg_element("line");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			path3 = svg_element("path");
			symbol10 = svg_element("symbol");
			path4 = svg_element("path");
			polyline6 = svg_element("polyline");
			line8 = svg_element("line");
			symbol11 = svg_element("symbol");
			path5 = svg_element("path");
			symbol12 = svg_element("symbol");
			polyline7 = svg_element("polyline");
			polyline8 = svg_element("polyline");
			line9 = svg_element("line");
			line10 = svg_element("line");
			symbol13 = svg_element("symbol");
			line11 = svg_element("line");
			line12 = svg_element("line");
			line13 = svg_element("line");
			symbol14 = svg_element("symbol");
			path6 = svg_element("path");
			symbol15 = svg_element("symbol");
			line14 = svg_element("line");
			symbol16 = svg_element("symbol");
			line15 = svg_element("line");
			line16 = svg_element("line");
			symbol17 = svg_element("symbol");
			path7 = svg_element("path");
			polyline9 = svg_element("polyline");
			polyline10 = svg_element("polyline");
			symbol18 = svg_element("symbol");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			symbol19 = svg_element("symbol");
			path11 = svg_element("path");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true }, false);
			var div_nodes = children(div);

			svg = claim_element(div_nodes, "svg", {}, true);
			var svg_nodes = children(svg);

			symbol0 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol0_nodes = children(symbol0);

			line0 = claim_element(symbol0_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line0_nodes = children(line0);

			line0_nodes.forEach(detach_dev);

			polyline0 = claim_element(symbol0_nodes, "polyline", { points: true }, true);
			var polyline0_nodes = children(polyline0);

			polyline0_nodes.forEach(detach_dev);
			symbol0_nodes.forEach(detach_dev);

			symbol1 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol1_nodes = children(symbol1);

			line1 = claim_element(symbol1_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line1_nodes = children(line1);

			line1_nodes.forEach(detach_dev);

			polyline1 = claim_element(symbol1_nodes, "polyline", { points: true }, true);
			var polyline1_nodes = children(polyline1);

			polyline1_nodes.forEach(detach_dev);
			symbol1_nodes.forEach(detach_dev);

			symbol2 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol2_nodes = children(symbol2);

			line2 = claim_element(symbol2_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line2_nodes = children(line2);

			line2_nodes.forEach(detach_dev);

			polyline2 = claim_element(symbol2_nodes, "polyline", { points: true }, true);
			var polyline2_nodes = children(polyline2);

			polyline2_nodes.forEach(detach_dev);
			symbol2_nodes.forEach(detach_dev);

			symbol3 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol3_nodes = children(symbol3);

			line3 = claim_element(symbol3_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line3_nodes = children(line3);

			line3_nodes.forEach(detach_dev);

			polyline3 = claim_element(symbol3_nodes, "polyline", { points: true }, true);
			var polyline3_nodes = children(polyline3);

			polyline3_nodes.forEach(detach_dev);
			symbol3_nodes.forEach(detach_dev);

			symbol4 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol4_nodes = children(symbol4);

			polyline4 = claim_element(symbol4_nodes, "polyline", { points: true }, true);
			var polyline4_nodes = children(polyline4);

			polyline4_nodes.forEach(detach_dev);
			symbol4_nodes.forEach(detach_dev);

			symbol5 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol5_nodes = children(symbol5);

			line4 = claim_element(symbol5_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line4_nodes = children(line4);

			line4_nodes.forEach(detach_dev);

			line5 = claim_element(symbol5_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line5_nodes = children(line5);

			line5_nodes.forEach(detach_dev);
			symbol5_nodes.forEach(detach_dev);

			symbol6 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol6_nodes = children(symbol6);

			path0 = claim_element(symbol6_nodes, "path", { d: true }, true);
			var path0_nodes = children(path0);

			path0_nodes.forEach(detach_dev);

			polyline5 = claim_element(symbol6_nodes, "polyline", { points: true }, true);
			var polyline5_nodes = children(polyline5);

			polyline5_nodes.forEach(detach_dev);

			line6 = claim_element(symbol6_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line6_nodes = children(line6);

			line6_nodes.forEach(detach_dev);
			symbol6_nodes.forEach(detach_dev);

			symbol7 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol7_nodes = children(symbol7);

			path1 = claim_element(symbol7_nodes, "path", { d: true }, true);
			var path1_nodes = children(path1);

			path1_nodes.forEach(detach_dev);

			polygon = claim_element(symbol7_nodes, "polygon", { points: true }, true);
			var polygon_nodes = children(polygon);

			polygon_nodes.forEach(detach_dev);
			symbol7_nodes.forEach(detach_dev);

			symbol8 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol8_nodes = children(symbol8);

			path2 = claim_element(symbol8_nodes, "path", { d: true }, true);
			var path2_nodes = children(path2);

			path2_nodes.forEach(detach_dev);
			symbol8_nodes.forEach(detach_dev);

			symbol9 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol9_nodes = children(symbol9);

			line7 = claim_element(symbol9_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line7_nodes = children(line7);

			line7_nodes.forEach(detach_dev);

			circle0 = claim_element(symbol9_nodes, "circle", { cx: true, cy: true, r: true }, true);
			var circle0_nodes = children(circle0);

			circle0_nodes.forEach(detach_dev);

			circle1 = claim_element(symbol9_nodes, "circle", { cx: true, cy: true, r: true }, true);
			var circle1_nodes = children(circle1);

			circle1_nodes.forEach(detach_dev);

			path3 = claim_element(symbol9_nodes, "path", { d: true }, true);
			var path3_nodes = children(path3);

			path3_nodes.forEach(detach_dev);
			symbol9_nodes.forEach(detach_dev);

			symbol10 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol10_nodes = children(symbol10);

			path4 = claim_element(symbol10_nodes, "path", { d: true }, true);
			var path4_nodes = children(path4);

			path4_nodes.forEach(detach_dev);

			polyline6 = claim_element(symbol10_nodes, "polyline", { points: true }, true);
			var polyline6_nodes = children(polyline6);

			polyline6_nodes.forEach(detach_dev);

			line8 = claim_element(symbol10_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line8_nodes = children(line8);

			line8_nodes.forEach(detach_dev);
			symbol10_nodes.forEach(detach_dev);

			symbol11 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol11_nodes = children(symbol11);

			path5 = claim_element(symbol11_nodes, "path", { d: true }, true);
			var path5_nodes = children(path5);

			path5_nodes.forEach(detach_dev);
			symbol11_nodes.forEach(detach_dev);

			symbol12 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol12_nodes = children(symbol12);

			polyline7 = claim_element(symbol12_nodes, "polyline", { points: true }, true);
			var polyline7_nodes = children(polyline7);

			polyline7_nodes.forEach(detach_dev);

			polyline8 = claim_element(symbol12_nodes, "polyline", { points: true }, true);
			var polyline8_nodes = children(polyline8);

			polyline8_nodes.forEach(detach_dev);

			line9 = claim_element(symbol12_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line9_nodes = children(line9);

			line9_nodes.forEach(detach_dev);

			line10 = claim_element(symbol12_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line10_nodes = children(line10);

			line10_nodes.forEach(detach_dev);
			symbol12_nodes.forEach(detach_dev);

			symbol13 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol13_nodes = children(symbol13);

			line11 = claim_element(symbol13_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line11_nodes = children(line11);

			line11_nodes.forEach(detach_dev);

			line12 = claim_element(symbol13_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line12_nodes = children(line12);

			line12_nodes.forEach(detach_dev);

			line13 = claim_element(symbol13_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line13_nodes = children(line13);

			line13_nodes.forEach(detach_dev);
			symbol13_nodes.forEach(detach_dev);

			symbol14 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol14_nodes = children(symbol14);

			path6 = claim_element(symbol14_nodes, "path", { d: true }, true);
			var path6_nodes = children(path6);

			path6_nodes.forEach(detach_dev);
			symbol14_nodes.forEach(detach_dev);

			symbol15 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol15_nodes = children(symbol15);

			line14 = claim_element(symbol15_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line14_nodes = children(line14);

			line14_nodes.forEach(detach_dev);
			symbol15_nodes.forEach(detach_dev);

			symbol16 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol16_nodes = children(symbol16);

			line15 = claim_element(symbol16_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line15_nodes = children(line15);

			line15_nodes.forEach(detach_dev);

			line16 = claim_element(symbol16_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, true);
			var line16_nodes = children(line16);

			line16_nodes.forEach(detach_dev);
			symbol16_nodes.forEach(detach_dev);

			symbol17 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol17_nodes = children(symbol17);

			path7 = claim_element(symbol17_nodes, "path", { d: true }, true);
			var path7_nodes = children(path7);

			path7_nodes.forEach(detach_dev);

			polyline9 = claim_element(symbol17_nodes, "polyline", { points: true }, true);
			var polyline9_nodes = children(polyline9);

			polyline9_nodes.forEach(detach_dev);

			polyline10 = claim_element(symbol17_nodes, "polyline", { points: true }, true);
			var polyline10_nodes = children(polyline10);

			polyline10_nodes.forEach(detach_dev);
			symbol17_nodes.forEach(detach_dev);

			symbol18 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol18_nodes = children(symbol18);

			path8 = claim_element(symbol18_nodes, "path", { d: true }, true);
			var path8_nodes = children(path8);

			path8_nodes.forEach(detach_dev);

			path9 = claim_element(symbol18_nodes, "path", { d: true }, true);
			var path9_nodes = children(path9);

			path9_nodes.forEach(detach_dev);

			path10 = claim_element(symbol18_nodes, "path", { d: true }, true);
			var path10_nodes = children(path10);

			path10_nodes.forEach(detach_dev);
			symbol18_nodes.forEach(detach_dev);

			symbol19 = claim_element(svg_nodes, "symbol", { id: true, class: true, viewBox: true }, true);
			var symbol19_nodes = children(symbol19);

			path11 = claim_element(symbol19_nodes, "path", { d: true }, true);
			var path11_nodes = children(path11);

			path11_nodes.forEach(detach_dev);
			symbol19_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(line0, "x1", "19");
			attr_dev(line0, "y1", "12");
			attr_dev(line0, "x2", "5");
			attr_dev(line0, "y2", "12");
			add_location(line0, file$3, 3, 3, 143);
			attr_dev(polyline0, "points", "12 19 5 12 12 5");
			add_location(polyline0, file$3, 4, 3, 186);
			attr_dev(symbol0, "id", "arrow-left");
			attr_dev(symbol0, "class", "icon");
			attr_dev(symbol0, "viewBox", "0 0 24 24");
			add_location(symbol0, file$3, 2, 2, 82);
			attr_dev(line1, "x1", "5");
			attr_dev(line1, "y1", "12");
			attr_dev(line1, "x2", "19");
			attr_dev(line1, "y2", "12");
			add_location(line1, file$3, 8, 3, 301);
			attr_dev(polyline1, "points", "12 5 19 12 12 19");
			add_location(polyline1, file$3, 9, 3, 344);
			attr_dev(symbol1, "id", "arrow-right");
			attr_dev(symbol1, "class", "icon");
			attr_dev(symbol1, "viewBox", "0 0 24 24");
			add_location(symbol1, file$3, 7, 2, 239);
			attr_dev(line2, "x1", "12");
			attr_dev(line2, "y1", "19");
			attr_dev(line2, "x2", "12");
			attr_dev(line2, "y2", "5");
			add_location(line2, file$3, 13, 3, 457);
			attr_dev(polyline2, "points", "5 12 12 5 19 12");
			add_location(polyline2, file$3, 14, 3, 500);
			attr_dev(symbol2, "id", "arrow-up");
			attr_dev(symbol2, "class", "icon");
			attr_dev(symbol2, "viewBox", "0 0 24 24");
			add_location(symbol2, file$3, 12, 2, 398);
			attr_dev(line3, "x1", "12");
			attr_dev(line3, "y1", "5");
			attr_dev(line3, "x2", "12");
			attr_dev(line3, "y2", "19");
			add_location(line3, file$3, 18, 3, 614);
			attr_dev(polyline3, "points", "19 12 12 19 5 12");
			add_location(polyline3, file$3, 19, 3, 657);
			attr_dev(symbol3, "id", "arrow-down");
			attr_dev(symbol3, "class", "icon");
			attr_dev(symbol3, "viewBox", "0 0 24 24");
			add_location(symbol3, file$3, 17, 2, 553);
			attr_dev(polyline4, "points", "20 6 9 17 4 12");
			add_location(polyline4, file$3, 23, 3, 767);
			attr_dev(symbol4, "id", "check");
			attr_dev(symbol4, "class", "icon");
			attr_dev(symbol4, "viewBox", "0 0 24 24");
			add_location(symbol4, file$3, 22, 2, 711);
			attr_dev(line4, "x1", "18");
			attr_dev(line4, "y1", "6");
			attr_dev(line4, "x2", "6");
			attr_dev(line4, "y2", "18");
			add_location(line4, file$3, 27, 3, 875);
			attr_dev(line5, "x1", "6");
			attr_dev(line5, "y1", "6");
			attr_dev(line5, "x2", "18");
			attr_dev(line5, "y2", "18");
			add_location(line5, file$3, 28, 3, 917);
			attr_dev(symbol5, "id", "close");
			attr_dev(symbol5, "class", "icon");
			attr_dev(symbol5, "viewBox", "0 0 24 24");
			add_location(symbol5, file$3, 26, 2, 819);
			attr_dev(path0, "d", "M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15");
			add_location(path0, file$3, 32, 3, 1030);
			attr_dev(polyline5, "points", "7 10 12 15 17 10");
			add_location(polyline5, file$3, 33, 3, 1092);
			attr_dev(line6, "x1", "12");
			attr_dev(line6, "y1", "15");
			attr_dev(line6, "x2", "12");
			attr_dev(line6, "y2", "3");
			add_location(line6, file$3, 34, 3, 1134);
			attr_dev(symbol6, "id", "download");
			attr_dev(symbol6, "class", "icon");
			attr_dev(symbol6, "viewBox", "0 0 24 24");
			add_location(symbol6, file$3, 31, 2, 971);
			attr_dev(path1, "d", "M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34");
			add_location(path1, file$3, 38, 3, 1244);
			attr_dev(polygon, "points", "18 2 22 6 12 16 8 16 8 12 18 2");
			add_location(polygon, file$3, 39, 3, 1324);
			attr_dev(symbol7, "id", "edit");
			attr_dev(symbol7, "class", "icon");
			attr_dev(symbol7, "viewBox", "0 0 24 24");
			add_location(symbol7, file$3, 37, 2, 1189);
			attr_dev(path2, "d", "M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22");
			add_location(path2, file$3, 43, 3, 1448);
			attr_dev(symbol8, "id", "github");
			attr_dev(symbol8, "class", "icon");
			attr_dev(symbol8, "viewBox", "0 0 24 24");
			add_location(symbol8, file$3, 42, 2, 1391);
			attr_dev(line7, "x1", "6");
			attr_dev(line7, "y1", "3");
			attr_dev(line7, "x2", "6");
			attr_dev(line7, "y2", "15");
			add_location(line7, file$3, 47, 3, 1829);
			attr_dev(circle0, "cx", "18");
			attr_dev(circle0, "cy", "6");
			attr_dev(circle0, "r", "3");
			add_location(circle0, file$3, 48, 3, 1870);
			attr_dev(circle1, "cx", "6");
			attr_dev(circle1, "cy", "18");
			attr_dev(circle1, "r", "3");
			add_location(circle1, file$3, 49, 3, 1905);
			attr_dev(path3, "d", "M18 9a9 9 0 0 1-9 9");
			add_location(path3, file$3, 50, 3, 1940);
			attr_dev(symbol9, "id", "git-branch");
			attr_dev(symbol9, "class", "icon");
			attr_dev(symbol9, "viewBox", "0 0 24 24");
			add_location(symbol9, file$3, 46, 2, 1768);
			attr_dev(path4, "d", "M15 3H19A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H15");
			add_location(path4, file$3, 54, 3, 2045);
			attr_dev(polyline6, "points", "10 17 15 12 10 7");
			add_location(polyline6, file$3, 55, 3, 2107);
			attr_dev(line8, "x1", "15");
			attr_dev(line8, "y1", "12");
			attr_dev(line8, "x2", "3");
			attr_dev(line8, "y2", "12");
			add_location(line8, file$3, 56, 3, 2149);
			attr_dev(symbol10, "id", "log-in");
			attr_dev(symbol10, "class", "icon");
			attr_dev(symbol10, "viewBox", "0 0 24 24");
			add_location(symbol10, file$3, 53, 2, 1988);
			attr_dev(path5, "d", "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3");
			add_location(path5, file$3, 60, 3, 2263);
			attr_dev(symbol11, "id", "maximize");
			attr_dev(symbol11, "class", "icon");
			attr_dev(symbol11, "viewBox", "0 0 24 24");
			add_location(symbol11, file$3, 59, 2, 2204);
			attr_dev(polyline7, "points", "15 3 21 3 21 9");
			add_location(polyline7, file$3, 64, 3, 2446);
			attr_dev(polyline8, "points", "9 21 3 21 3 15");
			add_location(polyline8, file$3, 65, 3, 2486);
			attr_dev(line9, "x1", "21");
			attr_dev(line9, "y1", "3");
			attr_dev(line9, "x2", "14");
			attr_dev(line9, "y2", "10");
			add_location(line9, file$3, 66, 3, 2526);
			attr_dev(line10, "x1", "3");
			attr_dev(line10, "y1", "21");
			attr_dev(line10, "x2", "10");
			attr_dev(line10, "y2", "14");
			add_location(line10, file$3, 67, 3, 2569);
			attr_dev(symbol12, "id", "maximize-2");
			attr_dev(symbol12, "class", "icon");
			attr_dev(symbol12, "viewBox", "0 0 24 24");
			add_location(symbol12, file$3, 63, 2, 2385);
			attr_dev(line11, "x1", "3");
			attr_dev(line11, "y1", "12");
			attr_dev(line11, "x2", "21");
			attr_dev(line11, "y2", "12");
			add_location(line11, file$3, 71, 3, 2679);
			attr_dev(line12, "x1", "3");
			attr_dev(line12, "y1", "6");
			attr_dev(line12, "x2", "21");
			attr_dev(line12, "y2", "6");
			add_location(line12, file$3, 72, 3, 2722);
			attr_dev(line13, "x1", "3");
			attr_dev(line13, "y1", "18");
			attr_dev(line13, "x2", "21");
			attr_dev(line13, "y2", "18");
			add_location(line13, file$3, 73, 3, 2763);
			attr_dev(symbol13, "id", "menu");
			attr_dev(symbol13, "class", "icon");
			attr_dev(symbol13, "viewBox", "0 0 24 24");
			add_location(symbol13, file$3, 70, 2, 2624);
			attr_dev(path6, "d", "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z");
			add_location(path6, file$3, 77, 3, 2883);
			attr_dev(symbol14, "id", "message-square");
			attr_dev(symbol14, "class", "icon");
			attr_dev(symbol14, "viewBox", "0 0 24 24");
			add_location(symbol14, file$3, 76, 2, 2818);
			attr_dev(line14, "x1", "5");
			attr_dev(line14, "y1", "12");
			attr_dev(line14, "x2", "19");
			attr_dev(line14, "y2", "12");
			add_location(line14, file$3, 81, 3, 3029);
			attr_dev(symbol15, "id", "minus");
			attr_dev(symbol15, "class", "icon");
			attr_dev(symbol15, "viewBox", "0 0 24 24");
			add_location(symbol15, file$3, 80, 2, 2973);
			attr_dev(line15, "x1", "12");
			attr_dev(line15, "y1", "5");
			attr_dev(line15, "x2", "12");
			attr_dev(line15, "y2", "19");
			add_location(line15, file$3, 85, 3, 3139);
			attr_dev(line16, "x1", "5");
			attr_dev(line16, "y1", "12");
			attr_dev(line16, "x2", "19");
			attr_dev(line16, "y2", "12");
			add_location(line16, file$3, 86, 3, 3182);
			attr_dev(symbol16, "id", "plus");
			attr_dev(symbol16, "class", "icon");
			attr_dev(symbol16, "viewBox", "0 0 24 24");
			add_location(symbol16, file$3, 84, 2, 3084);
			attr_dev(path7, "d", "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z");
			add_location(path7, file$3, 90, 3, 3292);
			attr_dev(polyline9, "points", "17 21 17 13 7 13 7 21");
			add_location(polyline9, file$3, 91, 3, 3372);
			attr_dev(polyline10, "points", "7 3 7 8 15 8");
			add_location(polyline10, file$3, 92, 3, 3419);
			attr_dev(symbol17, "id", "save");
			attr_dev(symbol17, "class", "icon");
			attr_dev(symbol17, "viewBox", "0 0 24 24");
			add_location(symbol17, file$3, 89, 2, 3237);
			attr_dev(path8, "d", "M9,7L6,7A2 2 0 0 0 6,17L9,17");
			add_location(path8, file$3, 96, 3, 3524);
			attr_dev(path9, "d", "M15,7L18,7A2 2 0 0 1 18,17L15,17");
			add_location(path9, file$3, 97, 3, 3568);
			attr_dev(path10, "d", "M7,12L17,12");
			add_location(path10, file$3, 98, 3, 3616);
			attr_dev(symbol18, "id", "link");
			attr_dev(symbol18, "class", "icon");
			attr_dev(symbol18, "viewBox", "0 0 24 24");
			add_location(symbol18, file$3, 95, 2, 3469);
			attr_dev(path11, "d", "M2,7 L12,17 L20,7");
			add_location(path11, file$3, 102, 3, 3713);
			attr_dev(symbol19, "id", "chevron");
			attr_dev(symbol19, "class", "icon");
			attr_dev(symbol19, "viewBox", "0 0 24 24");
			add_location(symbol19, file$3, 101, 2, 3655);
			add_location(svg, file$3, 1, 1, 74);
			set_style(div, "display", "none");
			add_location(div, file$3, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, symbol0);
			append_dev(symbol0, line0);
			append_dev(symbol0, polyline0);
			append_dev(svg, symbol1);
			append_dev(symbol1, line1);
			append_dev(symbol1, polyline1);
			append_dev(svg, symbol2);
			append_dev(symbol2, line2);
			append_dev(symbol2, polyline2);
			append_dev(svg, symbol3);
			append_dev(symbol3, line3);
			append_dev(symbol3, polyline3);
			append_dev(svg, symbol4);
			append_dev(symbol4, polyline4);
			append_dev(svg, symbol5);
			append_dev(symbol5, line4);
			append_dev(symbol5, line5);
			append_dev(svg, symbol6);
			append_dev(symbol6, path0);
			append_dev(symbol6, polyline5);
			append_dev(symbol6, line6);
			append_dev(svg, symbol7);
			append_dev(symbol7, path1);
			append_dev(symbol7, polygon);
			append_dev(svg, symbol8);
			append_dev(symbol8, path2);
			append_dev(svg, symbol9);
			append_dev(symbol9, line7);
			append_dev(symbol9, circle0);
			append_dev(symbol9, circle1);
			append_dev(symbol9, path3);
			append_dev(svg, symbol10);
			append_dev(symbol10, path4);
			append_dev(symbol10, polyline6);
			append_dev(symbol10, line8);
			append_dev(svg, symbol11);
			append_dev(symbol11, path5);
			append_dev(svg, symbol12);
			append_dev(symbol12, polyline7);
			append_dev(symbol12, polyline8);
			append_dev(symbol12, line9);
			append_dev(symbol12, line10);
			append_dev(svg, symbol13);
			append_dev(symbol13, line11);
			append_dev(symbol13, line12);
			append_dev(symbol13, line13);
			append_dev(svg, symbol14);
			append_dev(symbol14, path6);
			append_dev(svg, symbol15);
			append_dev(symbol15, line14);
			append_dev(svg, symbol16);
			append_dev(symbol16, line15);
			append_dev(symbol16, line16);
			append_dev(svg, symbol17);
			append_dev(symbol17, path7);
			append_dev(symbol17, polyline9);
			append_dev(symbol17, polyline10);
			append_dev(svg, symbol18);
			append_dev(symbol18, path8);
			append_dev(symbol18, path9);
			append_dev(symbol18, path10);
			append_dev(svg, symbol19);
			append_dev(symbol19, path11);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$3.name, type: "component", source: "", ctx });
	return block;
}

class Icons extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$3, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Icons", options, id: create_fragment$3.name });
	}
}

export { Docs as D, Icons as I, Icon as a, getFragment as g };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
